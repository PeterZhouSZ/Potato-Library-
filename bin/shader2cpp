#!/usr/bin/python3

from sys import stdout
from os.path import basename
from argparse import ArgumentParser
from re import sub, ASCII
from datetime import datetime


argparser = ArgumentParser(description='Convert a set of shaders into cpp source code')
argparser.add_argument('-e', '--extern',  default=False, action='store_true',
	help="Declare variables with external linkage.")
argparser.add_argument('-g', '--include-guard', default='',
	help="Protect the file against multiple inclusion.")
argparser.add_argument('-o', '--output', default='-',
	help="Write the output to the file output, or stdout if omitted or output is '-'.")
argparser.add_argument('-n', '--namespace', default='',
	help="Put the output code inside NAMESPACE.")
argparser.add_argument('shaders', nargs='+')
options = argparser.parse_args()


namespaces = options.namespace.split('::')

out = open(options.output, 'w') if options.output != '-' else stdout
print("// Generated by shader2cpp.", file=out)
print("// {}".format(datetime.utcnow().isoformat()), file=out)
print(file=out)
print(file=out)

if options.include_guard:
	print("#ifndef", options.include_guard, file=out)
	print("#define", options.include_guard, file=out)
	print(file=out)
	print(file=out)

if namespaces:
	for ns in namespaces:
		if ns != '':
			print("namespace {}".format(ns), file=out)
			print("{", file=out)
	print(file=out)

for shader_file in options.shaders:
	with open(shader_file) as shader:
		var_name = sub(r'\W', '_', basename(shader_file), flags=ASCII)
		if options.extern:
			print('extern const char* {};'.format(var_name), file=out)
			print('const char* {} ='.format(var_name), file=out)
		else:
			print('static const char* {} ='.format(var_name), file=out)
		for line in shader:
			print('\t"{}\\n"'.format(line.rstrip()), file=out)
		print('\t"";', file=out)
		print(file=out)

if namespaces:
	for ns in namespaces:
		if ns != '':
			print("}", file=out)
	print(file=out)
 
if options.include_guard:
	print("#endif", options.include_guard, file=out)
	
out.close()
