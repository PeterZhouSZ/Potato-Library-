namespace Vitelotte
{
/*!
  \page vitelotte_user_manual_page User Manual

  \authors Simon BoyÃ©, Gautier Ciaudo, Gael Guennebaud, Pascal Barla

  \section vitelotte_user_manual_intro Introduction

  - Problematic: complex vector gradients. Mesh-based vector graphics introduction and advantages.
  - Problem with the content generation -> diffusion methods -> solver


  \section vitelotte_user_manual_overview_library Library overview

  - VGMesh class to represent low-level mesh-based VG.
  - FemSolver to solve harmonic or biharmonic diffusion over triangular meshes (extensible).
  - VGMesh renderer to display triangular VGMesh with linear or quadratic color interpolation.
  - MVGReader / MVGWriter to load / save VGMesh at any processing step
  - VGMeshWithCurves for a higher-level representation aware of "diffusion curves"

  To come:

  - VGMesh refinement to help generating meshes.
  - Curved edges for higher quality renderings.


  \section vitelotte_user_manual_overview_tools Tools overview

  - The mvg toolkit (`mvgtk`). Allow to do all high level operations of VGMeshWithCurves. Example:

  \code{.sh}
  # poring.mvg is a mvg with diffusion curves and point constraints.
  # This command generate an image with quadratic interpolation using
  # a biharmonic diffusion.
  mvgtk -v poring.mvg conv fv c2n finalize solve out out.mvg
  \endcode

  - `mvg_viewer` is a simple OpenGL viewer. It can display both 2D images and 3D meshes.
  - `mvg_editor` is a simple editor for mvg files. Its main purpose is to allow to experiment with the representation rather than being a user-friendly tool.

 */
 }
