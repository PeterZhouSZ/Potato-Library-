/*
 This Source Code Form is subject to the terms of the Mozilla Public
 License, v. 2.0. If a copy of the MPL was not distributed with this
 file, You can obtain one at http://mozilla.org/MPL/2.0/. 
*/


/*!
  \page vitelotte_example_mvgtk_page The MVG Toolkit example
  
  \section vitelotte_example_mvgtk_introduction_sec Introduction
  
  The MVG Toolkit, aka. <tt>mvgtk</tt> is more than a simple example, it is a command-line interface to the Vitelotte library. It is designed to allow to do common operation on mvg files without writing C++ code.
  
  There is a typical use of <tt>mvgtk</tt>:
  \code
  $ mvgtk -v my_file.mvg conv fv finalize solve out out.mvg
  Load mvg "my_file.mvg"...
  Set attributes to 271...
  Finalize...
  Solve...
  Biharmonic quadratic diffusion.
  Output "out.mvg"...
  \endcode
  
  Mvgtk first takes a list of global options, in this case <tt>-v</tt> that enable the verbose mode (mvgtk does not print anything without it, unless there is an error). Then you must specify the input file. Note that beside mvg files, mvgtk can load .obj files that will be treated as mvg with no attributes. The rest of the command line is a sequence of command (with options) that are executed in order on the mesh. Most commands modify the mesh for the subsequent operations. There is what the above line is doing:
  1. <tt>conv fv</tt> (convert) set the mesh attributes to represent FV elements. In practice, just call \c VGMesh::setAttributes(VGMesh::FV_FLAGS).
  2. <tt>finalize</tt> finalize the mesh (see \ref vitelotte_user_manual_vgmesh). Just call <tt>VGMesh::finalize()</tt> as you may guess.
  3. <tt>solve</tt> solve the diffusion. The code of this command is a little bit more involved as it as to create the right solver class depending on the mesh attributes, call the right sequence of methods on it and do some error handling.
  4. <tt>out out.mvg</tt> output the resulting mesh in the file <tt>out.mvg</tt>. This is the only command of the line that does not modify the mesh. Note that it is possible to use this command several time, for instance to output intermediate results.
  
  The complete list of commands and options can always be found by calling <tt>mvgtk --help</tt>.
  
  
  \section vitelotte_example_mvgtk_options_sec Global options
  
  - <tt>-h</tt>, <tt>--help</tt>: print help and exit.
  - <tt>-v</tt>, <tt>--verbose</tt>: verbose mode.
  
  
  \section vitelotte_example_mvgtk_commands_sec Commands
  
  \subsection vitelotte_example_mvgtk_check_command_sub Check command
  
  The <tt>check</tt> command does some sanity check on the mesh. Problems found are printed on the standard output. Subsequent commands are only executed if no error was found.
  
  This command takes no parameter, but output more detailed diagnostic in case of error in verbose mode.
  
  Note that this command may not check exhaustively for all possible inconsistencies in the mesh, so the fact this command succeed is no guarantee that subsequent commands will.


  \subsection vitelotte_example_mvgtk_compact_command_sub Compact command
  
  The <tt>compact</tt> command remove all unused nodes in the mesh (nodes not referenced by an element), making it more compact. This command takes no options.
  
  The implementation of this command is straightforward:
  \include vitelotte/mvgtk/compactCommand.cpp
  
  
  \subsection vitelotte_example_mvgtk_convert_command_sub Convert command
  
  The <tt>convert ATTR</tt> (or <tt>conv</tt>) command allow to change the attributes set of the mesh, thus effectively converting the mesh to a new kind of element. The mandatory parameter ATTR describe the new set of attributes. It must be one of the following:
  - <tt>none</tt>: removes all attributes.
  - <tt>linear</tt>: set attributes to represent linear elements. See \ref VGMesh::LINEAR_FLAGS.
  - <tt>quadratic</tt>: set attributes to represent quadratic elements. See \ref VGMesh::QUADRATIC_FLAGS.
  - <tt>morley</tt>: set attributes to represent morley elements. See \ref VGMesh::MORLEY_FLAGS.
  - <tt>fv</tt>: set attributes to represent FV elements. See \ref VGMesh::FV_FLAGS.
  
  If you use <tt>convert</tt> to remove attributes from the mesh, it may be worth to call <tt>compact</tt> afterward to remove no longer used nodes as this is not done automatically.
  
  \include vitelotte/mvgtk/convertCommand.cpp
  
  
  \subsection vitelotte_example_mvgtk_c2n_command_sub Curves-to-nodes command
  
  The <tt>curves-to-nodes</tt> (or <tt>c2n</tt>) command set nodes constraints according to curves and point constraints (those are high level constraints defined in the \ref vitelotte_example_vg_mesh_with_curves_page). This command first remove all node. Note that the resulting mesh will only have constrained nodes set, so you probably want to call <tt>finalize</tt> afterward.
  
  \include vitelotte/mvgtk/curvesToNodesCommand.cpp
  
  
  \subsection vitelotte_example_mvgtk_finalize_command_sub Finalize command
  
  The <tt>finalize</tt> command finalize the mesh. See \ref vitelotte_user_manual_fem_solver for a detailed explanation of the finalization mechanism.
  
  The code is as simple as it can be:
  \include vitelotte/mvgtk/finalizeCommand.cpp
  
  
  \subsection vitelotte_example_mvgtk_output_command_sub Output command
  
  The <tt>output FILENAME</tt> (or <tt>out</tt>) command output the mesh in FILENAME using the MVG file format.
  
  \include vitelotte/mvgtk/outputCommand.cpp
  
  
  \subsection vitelotte_example_mvgtk_plot_command_sub Plot command
  
  The <tt>plot COEFF SUBDIV FILENAME</tt> command output the mesh in FILENAME in the obj file format. The \c x and \c y vertices coordinates are not modified and the \c z coordinate is the value of the coefficient COEFF. The SUBDIV parameter allow to control the level of subdivision each element.
  
  Note that elements subdivision depends on the current mesh attributes. If the mesh represent FV element, the plot will show FV element (which produces discontinuities at their boundaries). You can use <tt>convert</tt> before calling <tt>plot</tt> to change the elements used.
  
  \include vitelotte/mvgtk/plotCommand.cpp
  
  
  \subsection vitelotte_example_mvgtk_simplify_command_sub Simplify command
  \subsection vitelotte_example_mvgtk_solve_command_sub Solve command

 */
