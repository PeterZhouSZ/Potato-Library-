/*
 This Source Code Form is subject to the terms of the Mozilla Public
 License, v. 2.0. If a copy of the MPL was not distributed with this
 file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
// Generated by shader2cpp.
// 2015-01-16T15:18:09.718321


#ifndef _VITELOTTE_UTILS_VG_MESH_GL2_RENDERER_SHADERS_
#define _VITELOTTE_UTILS_VG_MESH_GL2_RENDERER_SHADERS_


namespace Vitelotte
{
namespace VGMeshGL2RendererShaders
{

static const char* frag_quadratic_glsl =
	"/*\n"
	" This Source Code Form is subject to the terms of the Mozilla Public\n"
	" License, v. 2.0. If a copy of the MPL was not distributed with this\n"
	" file, You can obtain one at http://mozilla.org/MPL/2.0/.\n"
	"*/\n"
	"\n"
	"uniform sampler2D nodes;\n"
	"uniform int baseNodeIndex;\n"
	"uniform bool singularTriangles;\n"
	"uniform int nodesTextureSize;\n"
	"\n"
	"varying highp vec2 position;\n"
	"varying highp vec3 basis;\n"
	"varying highp vec4 edges;\n"
	"varying mediump vec2 baseNodeCoord;\n"
	"\n"
	"\n"
	"highp float irlerp(in highp vec2 vx, in highp vec2 v1, in highp vec2 v2)\n"
	"{\n"
	"    highp float alpha = acos(clamp(dot(v1, vx), -1., 1.));\n"
	"    highp float beta = acos(clamp(dot(v1, v2), -1., 1.));\n"
	"    return alpha / beta;\n"
	"}\n"
	"\n"
	"lowp vec4 quadraticInterp(in lowp vec4 colors[6])\n"
	"{\n"
	"    return\n"
	"        colors[0] * basis.x * (2. * basis.x - 1.) +\n"
	"        colors[1] * basis.y * (2. * basis.y - 1.) +\n"
	"        colors[2] * basis.z * (2. * basis.z - 1.) +\n"
	"        colors[3] * 4. * basis.y * basis.z +\n"
	"        colors[4] * 4. * basis.z * basis.x +\n"
	"        colors[5] * 4. * basis.x * basis.y;\n"
	"}\n"
	"\n"
	"void main(void)\n"
	"{\n"
	"    mediump float nodeAdvance = 1. / float(nodesTextureSize);\n"
	"    lowp vec4 colorNodes[6];\n"
	"    colorNodes[0] = texture2D(nodes, baseNodeCoord + vec2(0. * nodeAdvance, 0.));\n"
	"    colorNodes[1] = texture2D(nodes, baseNodeCoord + vec2(1. * nodeAdvance, 0.));\n"
	"    colorNodes[2] = texture2D(nodes, baseNodeCoord + vec2(2. * nodeAdvance, 0.));\n"
	"    colorNodes[3] = texture2D(nodes, baseNodeCoord + vec2(3. * nodeAdvance, 0.));\n"
	"    colorNodes[4] = texture2D(nodes, baseNodeCoord + vec2(4. * nodeAdvance, 0.));\n"
	"    colorNodes[5] = texture2D(nodes, baseNodeCoord + vec2(5. * nodeAdvance, 0.));\n"
	"\n"
	"    if(singularTriangles)\n"
	"    {\n"
	"        highp vec2 p1 = edges.xy;\n"
	"        highp vec2 p2 = edges.zw + p1;\n"
	"        highp vec2 pos = basis[1] * p1 + basis[2] * p2;\n"
	"        colorNodes[0] = mix(colorNodes[0],\n"
	"            texture2D(nodes, baseNodeCoord + vec2(6. * nodeAdvance, 0.)),\n"
	"            irlerp(normalize(pos), normalize(p1), normalize(p2)));\n"
	"    }\n"
	"\n"
	"    gl_FragColor = quadraticInterp(colorNodes);\n"
	"}\n"
	"";

static const char* frag_wireframe_glsl =
	"/*\n"
	" This Source Code Form is subject to the terms of the Mozilla Public\n"
	" License, v. 2.0. If a copy of the MPL was not distributed with this\n"
	" file, You can obtain one at http://mozilla.org/MPL/2.0/.\n"
	"*/\n"
	"\n"
	"uniform highp float lineWidth;\n"
	"uniform lowp vec4 wireframeColor;\n"
	"uniform highp float zoom;\n"
	"\n"
	"varying highp vec2 position;\n"
	"varying highp vec3 basis;\n"
	"varying highp vec4 edges;\n"
	"\n"
	"\n"
	"highp float interpFactor(highp float dist, highp float radius)\n"
	"{\n"
	"    return clamp(.5 + radius - dist*zoom, 0., 1.);\n"
	"}\n"
	"\n"
	"void main(void)\n"
	"{\n"
	"    highp vec2 v0 = edges.xy;\n"
	"    highp vec2 v1 = edges.zw;\n"
	"    highp vec2 v2 = -(v0 + v1);\n"
	"\n"
	"    highp float _2area = v0.x * v1.y - v0.y * v1.x;\n"
	"    highp vec3 edgeDist = basis * _2area / vec3(length(v0), length(v1), length(v2));\n"
	"\n"
	"    highp float dist = 0.;\n"
	"    if(edgeDist.x < edgeDist.y && edgeDist.x < edgeDist.z)\n"
	"        dist = edgeDist.x;\n"
	"    else if(edgeDist.y < edgeDist.x && edgeDist.y < edgeDist.z)\n"
	"        dist = edgeDist.y;\n"
	"    else //if(edgeDist.z < edgeDist.x && edgeDist.z < edgeDist.y)\n"
	"        dist = edgeDist.z;\n"
	"\n"
	"    highp float intensity = interpFactor(dist, lineWidth/2.);\n"
	"    if(intensity < 0.001)\n"
	"        discard;\n"
	"\n"
	"    gl_FragColor = vec4(wireframeColor.rgb, wireframeColor.a * intensity);\n"
	"}\n"
	"";

static const char* vert_common_glsl =
	"/*\n"
	" This Source Code Form is subject to the terms of the Mozilla Public\n"
	" License, v. 2.0. If a copy of the MPL was not distributed with this\n"
	" file, You can obtain one at http://mozilla.org/MPL/2.0/.\n"
	"*/\n"
	"\n"
	"uniform mat4 viewMatrix;\n"
	"\n"
	"attribute highp vec4 vx_position;\n"
	"attribute highp vec3 vx_basis;\n"
	"attribute highp vec4 vx_edges;\n"
	"attribute mediump vec2 vx_baseNodeCoord;\n"
	"\n"
	"varying highp vec3 basis;\n"
	"varying highp vec4 edges;\n"
	"varying mediump vec2 baseNodeCoord;\n"
	"\n"
	"void main(void)\n"
	"{\n"
	"    gl_Position = viewMatrix * vx_position;\n"
	"    basis = vx_basis;\n"
	"    edges = vx_edges;\n"
	"    baseNodeCoord = vx_baseNodeCoord;\n"
	"}\n"
	"";

}
}

#endif
